package invopop

import (
	"context"
	"encoding/json"
	"net/url"
	"path"
	"strconv"

	"github.com/invopop/gobl/dsig"
)

const (
	siloBasePath = "/silo/v1"
	entriesPath  = "entries"
)

// SiloService implements the Invopop Silo API.
type SiloService service

// SiloEntriesService is responsible for managing the connection
// to the Silo API endpoints.
type SiloEntriesService service

// Entries provides a wrapper around silo entry methods.
func (svc *SiloService) Entries() *SiloEntriesService {
	return (*SiloEntriesService)(svc)
}

// Entry defines the fields provided by the Silo entry end points.
type Entry struct {
	ID        string `json:"id,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`

	Folder    string       `json:"folder" title:"Folder" description:"Key for the folder where the entry is located." example:"sales"`
	State     string       `json:"state,omitempty" title:"State" description:"Current state of the silo entry if not a draft." example:"sent"`
	Draft     bool         `json:"draft,omitempty" title:"Draft" description:"When true, indicates that the envelope is a draft." example:"true"`
	Invalid   bool         `json:"invalid,omitempty" title:"Invalid" description:"When true, the envelope's contents are invalid and need to be reviewed." example:"true"`
	EnvSchema string       `json:"env_schema" title:"Envelope Schema" description:"Schema URL for the envelope." example:"https://gobl.org/draft-0/envelope"`
	DocSchema string       `json:"doc_schema" title:"Object Schema" description:"Schema URL for the envelope's payload." example:"https://gobl.org/draft-0/bill/invoice"`
	Digest    *dsig.Digest `json:"digest" title:"Digest" description:"A copy of the digest from the envelope."`
	Tags      []string     `json:"tags,omitempty" title:"Tags" x-order:"8"`
	Context   string       `json:"context,omitempty" title:"Context" description:"When entry provided within a related query, this is the context within the document." example:"line.item"`

	Snippet json.RawMessage `json:"snippet,omitempty"`

	Attachments []*Attachment   `json:"attachments,omitempty"`
	Data        json.RawMessage `json:"data,omitempty"` // may not always be available
	Meta        []*Meta         `json:"meta,omitempty" title:"Meta" description:"Additional meta fields associated with the entry."`
}

// Meta describes a meta row embedded inside a Silo Entry.
type Meta struct {
	ID        string `json:"id" title:"ID" description:"UUID of the meta row." example:"347c5b04-cde2-11ed-afa1-0242ac120002"`
	CreatedAt string `json:"created_at" title:"Created At" description:"Timestamp of when the row was created." example:"2018-01-01T00:00:00.000Z"`
	UpdatedAt string `json:"updated_at" title:"Updated At" description:"Timestamp of when the row was last updated." example:"2018-01-01T00:00:00.000Z"`

	Src       string          `json:"src,omitempty" title:"Source" description:"The service or source that create this meta entry." example:"provider"`
	Key       string          `json:"key,omitempty" title:"Key" description:"Key used to identify the meta entry by the source." example:"service-id"`
	Ref       string          `json:"ref,omitempty" title:"Reference" description:"Indexable value used to locate the meta entry if a silo entry ID is not available."`
	Value     json.RawMessage `json:"value,omitempty" title:"Value" description:"The JSON data stored with the meta row." example:"{\"key\": \"value\"}"`
	LinkURL   string          `json:"link_url,omitempty" title:"Link URL" description:"URL associated with the meta row that may be used to perform additional actions or view more details." example:"https://example.com/info"`
	LinkScope string          `json:"link_scope,omitempty" title:"Link Scope" description:"Describes the context in which the link should be made available." example:"public"`
}

// EntryCollection contains a list of Entries that start from the provided created_at
// timestamp.
type EntryCollection struct {
	List []*Entry `json:"list"`
	// Filters
	Folder    string `json:"folder,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	// Position
	Limit      int32  `json:"limit"`
	Cursor     string `json:"cursor,omitempty"`
	NextCursor string `json:"next_cursor,omitempty"`
}

// Attachment represents a file that was generated by one of the job's intents
// and is stored by the Silo service.
type Attachment struct {
	ID        string `json:"id" title:"ID" description:"The UUID that identifies the attachment."`
	CreatedAt string `json:"created_at" title:"Created At" description:"The date and time this attachment was created." example:"2018-01-01T00:00:00.000Z"`

	Name   string `json:"name" title:"Name" description:"Name of the file." example:"invoice.pdf"`
	Desc   string `json:"desc,omitempty" title:"Description" description:"Description of the file." example:"Invoice for January 2021."`
	Hash   string `json:"hash" title:"Hash" description:"SHA256 hash of the file." example:"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6"`
	MIME   string `json:"mime" title:"MIME" description:"MIME type of the file." example:"application/pdf"`
	Size   int32  `json:"size" title:"Size" description:"Size of the file in bytes." example:"12345"`
	Stored bool   `json:"stored" title:"Stored" description:"When true, indicates that the file's contents have been uploaded successfully." example:"true"`
	URL    string `json:"url" title:"Public URL" description:"URL where the file's contents can be downloaded."` // public URL

	Meta map[string]string `json:"meta,omitempty" title:"Meta" description:"Any additional meta data about the attachment."`
}

// List provides a list of the silo entries that belong to the user. Pagination is supported
// using the EntryCollection's Cursor and NextCursor parameters.
func (svc *SiloEntriesService) List(ctx context.Context, col *EntryCollection) error {
	p := path.Join(siloBasePath, entriesPath)
	query := make(url.Values)
	if col.Limit != 0 {
		query.Add("limit", strconv.Itoa(int(col.Limit)))
	}
	if col.CreatedAt != "" {
		query.Add("created_at", col.CreatedAt)
	}
	if col.Cursor != "" {
		query.Add("cursor", col.Cursor)
	}
	if len(query) > 0 {
		p = p + "?" + query.Encode()
	}
	return svc.client.get(ctx, p, col)
}

// Create sends the provided Entry objects `data` to the server for storage.
// Only the `data` field and `ID` will be used.
func (svc *SiloEntriesService) Create(ctx context.Context, e *Entry) error {
	return svc.client.put(ctx, path.Join(siloBasePath, entriesPath, e.ID), e, e)
}

// Update sends the provided Entry object `data` to the server for storage,
// updating the existing envelope.
func (svc *SiloEntriesService) Update(ctx context.Context, e *Entry) error {
	return svc.client.patch(ctx, path.Join(siloBasePath, entriesPath, e.ID), e, e)
}

// Fetch updates the provided envelope instance with the results from the server.
func (svc *SiloEntriesService) Fetch(ctx context.Context, e *Entry) error {
	return svc.client.get(ctx, path.Join(siloBasePath, entriesPath, e.ID), e)
}
